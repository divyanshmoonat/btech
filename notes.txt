ReactJS? => Library of JS

Pre requisits
NodeJS : JS Environment (LTS Version)
VS Code : Code Editor
JS Knowledge : Basic understanding

document.getElementById().onClick = () => {};

Browser => Vanilla JS

ReactJS -> Babel (Compiler) -> Webpack (Bundler) -> Vanilla JS -> Browser

Compiler -> Convert React into Vanilla (Basic JS)
Bundler -> Merge multiple files into single file

Boilerplate (Basic structured & Pre configured setup)

CRA (Create React App) -> Meta/FB (Officially depcrecated)
Vite : npx create-vite@latest project-name

npm install / npm i => It install all required dependencies (frameworks/libraries) in our project
npm run dev -> Start the project on local system (Development Mode)

React -> 1 HTML File (Single Page Application)
DOM (Document Object Model) -> Representation of HTML tree
JSX (JavaScript & XML)

react ->  react-dom -> chalk -> loadash -> .... etc

npm (Node Package Manager) -> JS
composer -> php
pip -> python


UI Rendering

package.json -> start -> index.html -> main.jsx -> app.jsx (ReactJS Code)

--------------------------------------------------------------------------------
15/07/2025

JSX (JavaScript & XML) => JS with HTML

Func in JS -> Return various things but not HTML, Start the name with small letter and capital letter
Func in React (Functional Components) -> Return HTML, Starts the name with Capital Letter

JS
    sum() -> JS function correct wat to call
React
    App() -> Wrong react call component
    <App /> -> Correct react component call

Temaplate literals -> `User name is ${userName}
New line here`
React -> User name is {userName}

ES5 Fn
function demo() {
    // fn body
    consle.log(this)
    return <return-value>
}

ES6 Fn / Arrow fn
const demo = () => {
    //fn body
    console.log(this)
    return <return-value>
}


demo()

function sum (a,b) {
    reutrn a+b
}

const sum = (a,b) => {
    return a+b
}

const sum = (a,b) => a+b // Explicitly returned

HTML Tree Representation -> DOM
2 types of DOM

Real DOM -> HTML Tree you see on browser
Virtual Dom -> Copy of real DOM -> Can't be seen on browser (Internal to React library)
Diffing Algo -> Way to identify which node to change

key -> React internally identifies each element/HTML node with a unique ID

Imp concepts
1. Looping over array inside HTML
2. Using objects inside HTML
3. Importance of keys in dynamic/looped elements

--------------------------------------------------------------------------------
16/07/2025

Blogging Web App

Header -> Static
Content -> List of blogs, Detail of blog etc -> Dynamic
Footer -> Static

Websites's Repeated / Common part -> Components (Header, Footer, Card, Article etc)
Independent pages -> Pages (/about-us, /login, /contact-us etc)

Manage different pages on the screen -> Routing (react-router-dom)

Types of tags in HTML
Container Tag => <p></p>, <div></div>
Empty Tag => <br> </br> <img> </img> <input />

function BlogCard(title, image, body){
    console.log(title)
    console.log(image)
    console.log(body)
}

--------------------------------------------------------------------------------
17/07/2025

Spread Operator => 
const obj1 = {
    image: "a",
    title: "b",
    boyd: "c"
}
const obj2 = obj1; // copy by reference
const obj2 = {...obj1} // copy by value

const user = {
    name: "John",
    age: 10
}

const user2 = {
    name: "John",
    age: 10,
    mobNo: "12345"
}

const arr = ["A","B"]

Object & Array Destructuring

const user = {
    name: "John",
    age: 10
}
const age = user.age;
const { age } = user; // Object destrucuring
const { name, age } = user;
const { name: userName } = user; // userName variable contains the value of name property of user object

const arr = ["A","B"];
const first = arr[0];
const second = arr[1];

const [first,second] = arr; // Array Destructuring

Conditional Rendering
if(condition) {
    // true statement
} else {
    // false statement
}

(condition) ? true statement : false statement

?. (Optional Chaining) => If the value before ?. is available/truthy, then execute the part after ?.

Functional Coponents => v16 or more
Class based Components => v16 or less

--------------------------------------------------------------------------------
18/07/2025

useState() => Hook
Class based components vs functional component

document.getElementById("button").onclick = () => {

}

document.getElementById("button").addEventListener("click", () => {})

Re-render => Re showing the updated UI on the screen (Change in useState variable etc)

Types of functions in react

Functional components
Normal functions
Hooks

Class based component -> Lifecycle (Method)

--------------------------------------------------------------------------------
28/07/2025

Reactjs lifecycle (https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)
    Phases
        Methods

Forms
    1. Controlled components : The input components whose values are controlled by reactjs (eg using state variables)
    2. Uncontrolled components : The input components whose values are controlled by DOM 

--------------------------------------------------------------------------------
29/07/2025
Controlled Forms

input change -> updating the variable -> updating the input value

--------------------------------------------------------------------------------
30/07/2025

API (Application Programming Interface)
Pre requisits
1. End Point / URL : https://jsonplaceholder.typicode.com/submit-enquiry , https://jsonplaceholder.typicode.com/post, https://jsonplaceholder.typicode.com/todo etc
2. HTTP Method : GET/POST/PUT/PATCH/DELETE etc

GET : To fetch the data from the server
POST : To send the data to the server

XHR (XML Http Request) => API Calling
fetch() => Method to call API

--------------------------------------------------------------------------------
31/07/2025
API / HTTP Request -> 
1. Header -> Meta data of the request (extra info about the http req/res)
2. Body -> Actual data

--------------------------------------------------------------------------------
01/08/2025
useEffect() -> Hook used to manage side effects

Routing

/ => Root / Home <Home />
/about-us => <AboutUs />
/contact-us => <ContactUs />
/enquiry => <EnquiryControlledOptimized />

--------------------------------------------------------------------------------
05/08/2025

https://www.amazon.in/JBL-Wireless-Headphones-Bluetooth-Assistant/dp
https://www.amazon.in/HP-99Y16AA-H200-Wireless-Headset/dp
https://www.amazon.in/boAt-Rockerz-Technology-Integrated-Headphones/dp

base-url/<PRODUCT_NAME>/dp

http://localhost:5173/article-details/1
http://localhost:5173/article-details/2
http://localhost:5173/article-details/3
....

base-url/article-details/<ARTICLE_ID>

--------------------------------------------------------------------------------
06/08/2025
/ => Home
/articles => Articles List
/articles/<ARTICLE_ID> OR <ARTICLE_TITLE> => Article Details
/articles/<ARTICLE_ID>/<NEWPARAM>

Home -> Articles List -> Articles Details


Home / Articles List / Article Details

/ ---> Home

/articles ---> Home / Articles List

/articles/<ARTICLE_ID> ---> Home / Articles List / Article Details

--------------------------------------------------------------------------------
08/08/2025

Lifting up the state
    Article List
        BlogCard

React Portals

--------------------------------------------------------------------------------
11/08/2025

App
    Layout
        Header
            Nav bar
                Links
        Content
            Article List
                Blog Card
                    Headings
                    Buttons
                    Links
            User Profile
                Settings
                    Data privacy
                        Cards
                            Heading
                    Ad settings
                Profile info
        Footer
            List
                Links

Context API
    Provider => Provides the access of common state to whole application
    Consumer => Component which consumes/use the data from the state
    
--------------------------------------------------------------------------------
12/08/2025

Ways to implement CSS
1. Inline => Written directly with html tag with style attribute
2. Internal => Written in the html style tag
3. External => Written in the seperate css file

Modular css

--------------------------------------------------------------------------------
13/08/2025
App.css & index.css => Global styling

Redux vs context API

3rs Party solution vs React's native solution
Very robust vs less robust
Setup requires more efforts vs setup requires less efforts
Single source of truth vs Multiple source of truth
Uses Middlewares vs Does not use middlewares


Context API => State -> Provider, Consumer -> useContext()
Redux -> Store/State -> Reducer -> Action

Store/State => Common storage area for the app's data (ONLY 1 STORE IS ALLOWED)
Reducer => Contains business logic on how to update the data in the store
Actions => Plain objects which defines which type of operation to be performed with the data/payload
{
    type: "LOGIN_SUCCESS",
    payload: {
        userName: "John",
        email: "john@email.com"
    }
}

{
    type: "PLACE_ORDER",
    payload: {
        productId: 123,
        qty: 2,
        paymentMehod: "ONLINE"
    }
}

eComm ->
    User
    Product
    Checkout
    Cart
    Order

--------------------------------------------------------------------------------
14/08/2025

Working principles of Redux
1. Single source of truth (ONLY 1 STATE/STORE)
2. State is read only
3. Updates are made using pure functions only

state = {
    user: {
        address: {
            addressLine1: ""
        }
    },
    products: {},
    cart: {}
}

state.user.name = "John" XXXXXX NOT ALLOWED
state.user.address.addressLine1 = "NEW ADDRESS"

updateFn(oldState, data) { // Reducers
    // return new state
    const newState = {
        ...oldState,
        user: {
            ...oldState.user,
            name: "John",
            address: {
                ...oldState.user.address,
                addressLine1: ""
            }
        }
    }
    return newState;
}

--------------------------------------------------------------------------------
19/08/2025

Redux data flow

Login button click -> Dispatch login() action -> reducer -> store -> header (reading redux data)